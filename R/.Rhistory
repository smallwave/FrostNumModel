install.packages("kknn")
Knn_mod          <- train.kknn(GST ~ ., data = dataSimulation,kmax = 25,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1)
library(kknn)
Knn_mod          <- train.kknn(GST ~ ., data = dataSimulation,kmax = 25,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1)
predictions  <- predict(Knn_mod, newdata = dataVerification)
obsGST <- as.vector(dataVerification$GST)
simGST <- as.vector(predictions)
br2(simGST,obsGST)
plot(obsGST, simGST,xlab="Obseration", ylab="Model(SVM)", xlim=c(-30, 45),ylim=c(-30, 45),lwd = 10)
abline(a = 0, b = 1)
rmseVal <- rmse(simGST,obsGST)
meVal  <- me(simGST,obsGST)
r2Val   <- br2(simGST,obsGST)
text(-5, 40, toString(selVars),cex = 1, col =2)
text(-0, 36, paste("RMSE", toString(rmseVal),sep=': '),cex = 1, col =2)
text(-0, 32, paste("ME", toString(meVal),sep=': '),cex = 1, col =2)
text(-0, 28, paste("R2", toString(r2Val),sep=': '),cex = 1, col =2)
plot(obsGST, simGST,xlab="Obseration", ylab="Model(KNN)", xlim=c(-30, 45),ylim=c(-30, 45),lwd = 10)
abline(a = 0, b = 1)
rmseVal <- rmse(simGST,obsGST)
meVal  <- me(simGST,obsGST)
r2Val   <- br2(simGST,obsGST)
text(-5, 40, toString(selVars),cex = 1, col =2)
text(-0, 36, paste("RMSE", toString(rmseVal),sep=': '),cex = 1, col =2)
text(-0, 32, paste("ME", toString(meVal),sep=': '),cex = 1, col =2)
text(-0, 28, paste("R2", toString(r2Val),sep=': '),cex = 1, col =2)
library(C50)
hv_C5            <- C5.0(GST ~ .,data = dataSimulation)
hv_C5            <- C5.0(GST ~ .,data = dataSimulation)
hv_C5            <- C5.0(GST ~ .,data = dataSimulation,rules = TRUE)
library(frbs)
## Input data
data(frbsData)
data.train <- frbsData$MackeyGlass1000.dt[1: 500, ]
data.fit <- data.train[, 1 : 4]
data.tst <- frbsData$MackeyGlass1000.dt[501 : 1000, 1 : 4]
real.val <- matrix(frbsData$MackeyGlass1000.dt[501 : 1000, 5], ncol = 1)
range.data <- matrix(c(0.43462, 1.3105, 0.43462, 1.3105, 0.43462, 1.3105, 0.43462, 1.3105, 0.43462, 1.3105), nrow=2)
## Set the method and its parameters
method.type <- "ANFIS"
control <- list(num.labels = 5, max.iter = 100, step.size = 0.01, name = "MG1000")
object <- frbs.learn(data.train, range.data, method.type, control)
library(earth)
library(hydroGOF)
library(waveslim)
library(maptools)
library(raster)
library(stringr)
library(lubridate)
library(rgdal)
#************************************************************************************************
# define var name
#************************************************************************************************
inputCvs <- "PointDataLST.csv"
shapeFile <- "F:/worktemp/Permafrost(FrostModel)/Data/Position/Point.shp"
#************************************************************************************************
# read data  and   train model
#************************************************************************************************
shapefile   <- readShapeSpatial(shapeFile)
InData      <- read.csv(inputCvs, head=TRUE,sep=",")
InData      <- na.omit(InData)
X1 <- InData$LST_D
X2 <- InData$LST_N
X  <- (InData$LST_D + InData$LST_N)/2.0
# Haar
X1.haar <- modwt(X1, "haar",3)
X2.haar <- modwt(X2, "haar",3)
X.haar <- modwt(X, "haar",3)
inD <- data.frame(cbind(X1.haar$d1,X1.haar$d2,X1.haar$d3,X1.haar$s3,X2.haar$d1,X2.haar$d2,X2.haar$d3,X2.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3","ND1","ND2","ND3","NS3")
inD <- data.frame(cbind(X.haar$d1,X.haar$d2,X.haar$d3,X.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3")
InData　<- data.frame(InData,inD)
selVars <- c("DD1","DD2","DD3","DS3","GST","NDVI","SnowDepth")
dataSimulation <- subset(InData ,select = selVars)
earth.mod      <- earth(GST ~ ., data = dataSimulation)
summary(earth.mod )
#************************************************************************************************
# read ndvi data
# define A(1,2...12) and B(1,2,...12)
#************************************************************************************************
tifFileNDVIPath  <- "F:/worktemp/Permafrost(FrostModel)/Data/NDVI/"
fileList <- list.files(tifFileNDVIPath, pattern  = "\\.tif$", full.names = TRUE, recursive  = TRUE)
ndviA <- NULL
ndviB <- NULL
#************************************************************************************************
# process
#************************************************************************************************
for(fileName in fileList)
{
basefilename  <-  gsub(pattern = "\\.tif$", "",basename(fileName))
numTmp        <-  as.numeric(basefilename)
nmonth        <-  ceiling(numTmp/2.0)
rasterData    <- stack(fileName)
ndviExtract   <- extract(rasterData,shapefile,sp =TRUE)
ndviExtractDf <- ndviExtract@data
names(ndviExtractDf) <- c("Lon","Lat","Height","NDVI")
listNDVI <- ndviExtractDf$NDVI/1000.0
if(numTmp%%2){
ndviA = cbind(ndviA,listNDVI)
}else{
ndviB = cbind(ndviB,listNDVI)
}
}
ndviA  <- as.data.frame(ndviA)
ndviB  <- as.data.frame(ndviB)
names(ndviA) <- c("M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11","M12")
names(ndviB) <- c("M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11","M12")
#************************************************************************************************
# setfilepaths
#************************************************************************************************
tifInPath    <- "F:/worktemp/Permafrost(FrostModel)/Data/MYD2003/"
snowInPath   <- "F:/worktemp/Permafrost(FrostModel)/Data/snow depth/Tiff/2003/"
tifOutPath   <- "F:/worktemp/Permafrost(FrostModel)/Data/GST(OUT)/2003/"
dataSeq      <- seq(as.Date("2003/1/1"), as.Date("2003/12/31"), "days")
#************************************************************************************************
# getFilelist
#************************************************************************************************
selDate    <- dataSeq[1]
year       <- as.numeric(format(selDate, "%Y"))
doy        <- strftime(selDate, format = "%j")
yearDoy    <- paste(year,doy,sep='')
searchStr  <- paste("*",yearDoy,"*.tif",sep='')
fileList   <- list.files(tifInPath,  pattern =glob2rx(searchStr) , full.names = TRUE, recursive  = TRUE)
if (length(fileList) != 2)
{
print(selDate)
next
}
#define dataVerification
dataVerification <- NULL
#************************************************************************************************
# Set ndvi  file   and   construct
#************************************************************************************************
if(day(selDate) <= 15){
dataVerification$NDVI  <- ndviA[,month(selDate)]
}else{
dataVerification$NDVI  <- ndviB[,month(selDate)]
}
#************************************************************************************************
# get lst  file   and   construct
#************************************************************************************************
for (fileName in fileList)
{
rasterData    <- stack(fileName)
basefilename  <- gsub(pattern = "\\.tif$", "",basename(fileName))
print(basefilename)
strTemps      <- str_split_fixed(basefilename,"_",4)
typeLST       <- str_trim(strTemps[3])   # DAY
LSTExtract    <- extract(rasterData,shapefile,sp =TRUE)
LSTExtractDf  <- LSTExtract@data
names(LSTExtractDf) <- c("Lon","Lat","Height","LST")
LSTExtractDf$LST    <- LSTExtractDf$LST*0.02
LSTExtractDf        <- within(LSTExtractDf,
LST[LSTExtractDf$LST > 500.0  | LSTExtractDf$LST < 0.1 ] <- NA )
if(typeLST == "Day")
{
dataVerification$LST_D <- LSTExtractDf$LST
}else {
dataVerification$LST_N <- LSTExtractDf$LST
}
}
dataVerification           <-  data.frame(LSTExtractDf[,c("Lon","Lat","Height")],dataVerification)
dataVerification$ID        <-  as.numeric(as.character(rownames(dataVerification)))
#************************************************************************************************
# get snow  depths
#************************************************************************************************
rasterData    <- stack("F:/worktemp/Permafrost(FrostModel)/Data/snow depth/Tiff/2003/2003001.tif")
LSTExtract    <- extract(rasterData,shapefile,sp =TRUE)
LSTExtractDf  <- LSTExtract@data
names(LSTExtractDf)           <- c("Lon","Lat","Height","SnowDepth")
dataVerification$SnowDepth    <-  LSTExtractDf[,c("SnowDepth")]
#************************************************************************************************
# construct out put
#************************************************************************************************
outData        <- data.frame(dataVerification[, c("ID","Lon","Lat")])
names(outData) <- c("ID","Lon","Lat")
#************************************************************************************************
# wavelet
#************************************************************************************************
dataVerification <- na.omit(dataVerification)
# Haar
X1.haar <- modwt(dataVerification$LST_D, "haar",3)
X2.haar <- modwt(dataVerification$LST_N, "haar",3)
X  <- (dataVerification$LST_D + dataVerification$LST_N)/2.0
X.haar <- modwt(X, "haar",3)
inD <- data.frame(cbind(X1.haar$d1,X1.haar$d2,X1.haar$d3,X1.haar$s3,X2.haar$d1,X2.haar$d2,X2.haar$d3,X2.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3","ND1","ND2","ND3","NS3")
inD <- data.frame(cbind(X.haar$d1,X.haar$d2,X.haar$d3,X.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3")
dataVerification　         <- data.frame(dataVerification,inD)
dataVerification$GST       <- predict(earth.mod, newdata = dataVerification)
outRes                     <- merge(outData,dataVerification,by.x="ID",by.y="ID",all.x=TRUE)
outName <- yearDoy
map.Polygon <- data.frame(outRes[, c("Lon.x", "Lat.x","GST")])
names(map.Polygon) <- c("Lon","Lat","GST")
map.Polygon$GST<-as.numeric(as.character(map.Polygon$GST))
coordinates(map.Polygon) <- ~Lon + Lat
gridded(map.Polygon) <- TRUE
fname<-paste(tifOutPath,outName,"lstsnowAlly",".tiff",sep='')
writeGDAL(map.Polygon,fname,drivername="GTiff", type="Float32", options=NULL)
dataSimulation <- subset(InData,select = selVars, 10 < InData$Month < 12 & 0 < InData$Month < 5)
dataInput <- InData[9 < InData$Month | InData$Month <5]
dataInput <- InData[(InData$Month > 9) | (InData$Month <5)]
dataInput <- InData[(InData$Month > 9) | (InData$Month <5),]
View(dataInput)
dataSimulation <-  subset(dataInput,select = selVars)
earth.mod      <- earth(GST ~ ., data = dataSimulation)
summary(earth.mod)
dataVerification$GST       <- predict(earth.mod, newdata = dataVerification)
outRes                     <- merge(outData,dataVerification,by.x="ID",by.y="ID",all.x=TRUE)
outName <- yearDoy
map.Polygon <- data.frame(outRes[, c("Lon.x", "Lat.x","GST")])
names(map.Polygon) <- c("Lon","Lat","GST")
map.Polygon$GST<-as.numeric(as.character(map.Polygon$GST))
coordinates(map.Polygon) <- ~Lon + Lat
gridded(map.Polygon) <- TRUE
fname<-paste(tifOutPath,outName,"lstsnowCold",".tiff",sep='')
writeGDAL(map.Polygon,fname,drivername="GTiff", type="Float32", options=NULL)
selVars <- c("DD1","DD2","DD3","DS3","GST","NDVI")
dataInput <- InData[(InData$Month > 9) | (InData$Month <5),]
dataSimulation <-  subset(dataInput,select = selVars)
earth.mod      <- earth(GST ~ ., data = dataSimulation)
summary(earth.mod)
selVars <- c("DD1","DD2","DD3","DS3","GST","NDVI")
dataInput <- InData[(5 < InData$Month < 10),]
dataInput <- InData[(5 < InData$Month < 10),]
dataInput <- InData[(InData$Month >5 & InData$Month < 10),]
View(dataInput)
dataInput <- InData[(InData$Month >5 & InData$Month < 10),]
dataSimulation <-  subset(dataInput,select = selVars)
earth.mod      <- earth(GST ~ ., data = dataSimulation)
summary(earth.mod)
selVars <- c("DD1","DD2","DD3","DS3","GST","NDVI")
dataInput <- InData[(InData$Month >4 & InData$Month < 11),]
dataSimulation <-  subset(dataInput,select = selVars)
earth.mod      <- earth(GST ~ ., data = dataSimulation)
summary(earth.mod)
selVars <- c("DD1","DD2","DD3","DS3","GST")
dataInput <- InData[(InData$Month >4 & InData$Month < 11),]
dataSimulation <-  subset(dataInput,select = selVars)
earth.mod      <- earth(GST ~ ., data = dataSimulation)
summary(earth.mod)
dataSimulation <-  subset(InData,select = selVars)
earth.mod      <- earth(GST ~ ., data = dataSimulation)
summary(earth.mod)
selVars <- c("DD1","DD2","DD3","DS3","GST","NDVI")
dataSimulation <-  subset(InData,select = selVars)
earth.mod      <- earth(GST ~ ., data = dataSimulation)
summary(earth.mod)
dataInput <- InData[(InData$Month < 5 & InData$Month > 9),]
dataInput <- InData[(InData$Month < 5 | InData$Month > 9),]
X  <- (dataInput$LST_D + dataInput$LST_N)/2.0
X.haar <- modwt(X, "haar",3)
inD <- data.frame(cbind(X.haar$d1,X.haar$d2,X.haar$d3,X.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3")
dataInput　<- data.frame(dataInput,inD)
dataInput <- InData[(InData$Month < 5 | InData$Month > 9),]
View(InData)
InData      <- read.csv(inputCvs, head=TRUE,sep=",")
InData      <- na.omit(InData)
dataInput <- InData[(InData$Month < 5 | InData$Month > 9),]
X  <- (dataInput$LST_D + dataInput$LST_N)/2.0
X.haar <- modwt(X, "haar",3)
inD <- data.frame(cbind(X.haar$d1,X.haar$d2,X.haar$d3,X.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3")
dataInput　<- data.frame(dataInput,inD)
selVars <- c("DD1","DD2","DD3","DS3","GST","SnowDepth")
dataSimulation <-  subset(InData,select = selVars)
earth.mod      <- earth(GST ~ ., data = dataSimulation)
selVars <- c("DD1","DD2","DD3","DS3","GST","SnowDepth")
dataSimulation <-  subset(InData,select = selVars)
selVars <- c("DD1","DD2","DD3","DS3","GST")
selVars <- c("DD1","DD2","DD3","DS3","GST","SnowDepth")
dataSimulation <-  subset(dataInput,select = selVars)
earth.mod      <- earth(GST ~ ., data = dataSimulation)
summary(earth.mod)
selVars <- c("DD1","DD2","DD3","DS3","GST")
dataSimulation <-  subset(dataInput,select = selVars)
earth.mod      <- earth(GST ~ ., data = dataSimulation)
summary(earth.mod)
View(dataInput)
View(dataInput)
write.csv(dataInput, file = "nan.csv")
View(InData)
X1 <- InData$LST_D
X2 <- InData$LST_N
X1.haar <- modwt(X1, "haar",3)
X2.haar <- modwt(X2, "haar",3)
inD <- data.frame(cbind(X1.haar$d1,X1.haar$d2,X1.haar$d3,X1.haar$s3,X2.haar$d1,X2.haar$d2,X2.haar$d3,X2.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3","ND1","ND2","ND3","NS3")
X  <- (InData$LST_D + InData$LST_N)/2.0
X.haar <- modwt(X, "haar",3)
inD <- data.frame(cbind(X.haar$d1,X.haar$d2,X.haar$d3,X.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3")
InData　<- data.frame(InData,inD)
View(InData)
X  <- (InData$LST_D + InData$LST_N)/2.0
X  <- (InData$LST_D + InData$LST_N)/2.0
X.haar <- modwt(X, "haar",3)
inD <- data.frame(cbind(X.haar$d1,X.haar$d2,X.haar$d3,X.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3")
inD <- data.frame(cbind(X.haar$d1,X.haar$d2,X.haar$d3,X.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3")
View(dataInput)
InData      <- read.csv(inputCvs, head=TRUE,sep=",")
InData      <- na.omit(InData)
X  <- (InData$LST_D + InData$LST_N)/2.0
X.haar <- modwt(X, "haar",3)
inD <- data.frame(cbind(X.haar$d1,X.haar$d2,X.haar$d3,X.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3")
InData　<- data.frame(InData,inD)
View(InData)
dataInput <- InData[(InData$Month < 5 | InData$Month > 9),]
X  <- (dataInput$LST_D + dataInput$LST_N)/2.0
X.haar <- modwt(X, "haar",3)
inD <- data.frame(cbind(X.haar$d1,X.haar$d2,X.haar$d3,X.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3")
dataInput　<- data.frame(dataInput,inD)
View(dataInput)
X.haar <- dwt(X, "haar",3)
X.haar <- dwt(X, "haar",3)
X.haar <- dwt(X, "haar",3)
X  <- (InData$LST_D + InData$LST_N)/2.0
X.haar <- dwt(X, "haar",3)
XY  <- (InData$LST_D + InData$LST_N)/2.0
XY.haar <- dwt(X, "haar",3)
XC  <- (dataInput$LST_D + dataInput$LST_N)/2.0
XY.haar <- dwt(X, "haar",3)
XY  <- (InData$LST_D + InData$LST_N)/2.0
XY  <- (InData$LST_D + InData$LST_N)/2.0
XY.haar <- dwt(XY, "haar",3)
XY.haar <- modwt(XY, "haar",3)
XC  <- (dataInput$LST_D + dataInput$LST_N)/2.0
XC.haar <- dwt(XC, "haar",3)
XY.haar <- dwt(XY, "haar",3)
library(wavelets)
library("wavelets", lib.loc="~/R/win-library/3.2")
XC.haar <- dwt(XC, "haar",3)
x1 = [1,2,3,4,5,6,7,8,9,10]
x1 = c(1,2,3,4,5,6,7,8,9,10)
dwt(x1)
x2 <- c(1,2,3,4,5)
dwt(x2)
x2 = c(1,2,3,4,5)
dwt(x2)
x2
x1
x2 = c(1,2,3,4,5,6)
dwt(x2)
x2 = c(1,2,3,4,5,6,7,8,9,10)
dwt(x2)
x2 = c(1,2,3,4,5)
dwt(x2)
x1 = c(1,2,3,4,5,6,7,8,9,10)
x2 = c(1,2,3,4,5,6,7,8,9,10,11,12)
x1
x2
dwt(x1)
dwt(x2)
detach("package:wavelets", unload=TRUE)
library("waveslim", lib.loc="~/R/win-library/3.2")
modwt(x1)
detach("package:waveslim", unload=TRUE)
library("waveslim", lib.loc="~/R/win-library/3.2")
modwt(x1)
XY.haar <- dwt(XY, "haar",3)
XY  <- (InData$LST_D + InData$LST_N)/2.0
XY.haar <- modwt(XY, "haar",3)
XC  <- (dataInput$LST_D + dataInput$LST_N)/2.0
XC.haar <- modwt(XC, "haar",3)
plot(XC.haar)
XC.haar <- dwt(XC, "haar",3)
XY.haar <- dwt(XY, "haar",3)
x1
modwt(x1)
x1 <- seq(1,by=1,length.out=100)
x1
modwt(x1)
x1 <- seq(1,by=1,length.out=80)
x1
modwt(x1)
XY  <- (InData$LST_D + InData$LST_N)/2.0
XY.haar <- dwt(XY, "haar",3)
InData      <- read.csv(inputCvs, head=TRUE,sep=",")
InData      <- na.omit(InData)
inputCvs <- "PointDataLST.csv"
InData      <- read.csv(inputCvs, head=TRUE,sep=",")
InData      <- na.omit(InData)
XY  <- (InData$LST_D + InData$LST_N)/2.0
XY.haar <- modwt(XY, "haar",3)
dataInput <- InData[(InData$Month < 5 | InData$Month > 9),]
XC  <- (dataInput$LST_D + dataInput$LST_N)/2.0
XC.haar <- modwt(XC, "haar",3)
plot(XC)
plot(XY)
plot(XC)
plot(XC)
View(dataInput)
x1 <- seq(1,by=1,length.out=20)
modwt(x1)
x1 <- seq(1,by=2,length.out=20)
modwt(x1)
x1
x1 <- seq(1,by=1,length.out=20)
x1
x1 <- seq(1,by=2,length.out=10)
x1
x1 <- seq(1,by=1,length.out=20)
x1
modwt(x1)
x2 <- seq(1,by=2,length.out=10)
x2
modwt(x2)
x2 <- seq(1,by=1.5,length.out=15)
x2
modwt(x2)
x1 <- seq(1,by=1,length.out=60)
x1
modwt(x1)
x1 <- seq(1,by=2,length.out=30)
x1
modwt(x1)
XY.haar <- modwt(XY, "haar",3, boundary ="reflection")
XC.haar <- modwt(XC, "haar",3,boundary ="reflection")
XY.haar <- modwt(XY,3, boundary ="reflection")
XC.haar <- modwt(XC,3,boundary ="reflection")
XY.haar <- modwt(XY, "haar",3, boundary ="reflection")
XC.haar <- modwt(XC, "haar",3, boundary ="reflection")
XY.haar <- modwt(XY, 3, boundary ="reflection")
XC.haar <- modwt(XC, 3, boundary ="reflection")
XY.haar <- modwt(XY, 3)
XC.haar <- modwt(XC, 3)
XY.haar <- modwt(XY, "la8", 3)
XC.haar <- modwt(XC, "la8", 3)
XY.haar <- modwt(XY, "haar", 3)
XC.haar <- modwt(XC, "haar", 3)
XY  <- (InData$LST_D + InData$LST_N)/2.0
dataInput <- InData[(InData$Month < 2),]
View(dataInput)
View(dataInput)
XC  <- (dataInput$LST_D + dataInput$LST_N)/2.0
XY.haar <- modwt(XY, "haar", 3)
XC.haar <- modwt(XC, "haar", 3)
dataInput <- InData[(InData$Month < 5 | InData$Month > 9),]
XC  <- (dataInput$LST_D + dataInput$LST_N)/2.0
XY.haar <- modwt(XY, "haar", 3)
XC.haar <- modwt(XC, "haar", 3)
dataInput <- InData[(InData$Month < 5 | InData$Month > 8),]
XC  <- (dataInput$LST_D + dataInput$LST_N)/2.0
XY.haar <- modwt(XY, "haar", 3)
XC.haar <- modwt(XC, "haar", 3)
mean(XY)
mean(XC)
dataInput <- InData[(InData$Month < 4 | InData$Month > 9),]
XC  <- (dataInput$LST_D + dataInput$LST_N)/2.0
XY.haar <- modwt(XY, "haar", 3)
XC.haar <- modwt(XC, "haar", 3)
mean(XC)
mean(XY)
x1 <- seq(1,by=1,length.out=30000)
x1 <- seq(1,by=1,length.out=30000)
x2 <- seq(1,by=2,length.out=30000)
x2 <- seq(1,by=2,length.out=15000)
x11 <- modwt(x1, "haar", 3)
x21 <- modwt(x2, "haar", 3)
install.packages("wmtsa")
InData      <- read.csv(inputCvs, head=TRUE,sep=",")
InData      <- na.omit(InData)
X1 <- InData$LST_D
X2 <- InData$LST_N
XY  <- (InData$LST_D + InData$LST_N)/2.0
inputCvs <- "PointDataLST.csv"
InData      <- read.csv(inputCvs, head=TRUE,sep=",")
InData      <- na.omit(InData)
X1 <- InData$LST_D
X2 <- InData$LST_N
XY  <- (InData$LST_D + InData$LST_N)/2.0
library(wmtsa)
XY.haar <- wavCWT(XY)
XY.haar <- wavDWT(XY)
X1 <- InData$LST_D
X2 <- InData$LST_N
XY  <- (InData$LST_D + InData$LST_N)/2.0
dataInput <- InData[(InData$Month < 4 | InData$Month > 9),]
XC  <- (dataInput$LST_D + dataInput$LST_N)/2.0
XY.haar <- modwt(XY, "haar", 3)
XC.haar <- modwt(XC, "haar", 3)
mean(XY.haar$s3)
mean(XC.haar$s3)
mean(XY)
mean(XC)
XY.haar <- dwt(XY, "haar", 3)
XC.haar <- dwt(XC, "haar", 3)
View(dataInput)
View(InData)
inD <- data.frame(cbind(XY.haar$d1,XY.haar$d2,XY.haar$d3,XY.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3")
InData　<- data.frame(InData,inD)
inD <- data.frame(cbind(XC.haar$d1,XC.haar$d2,XC.haar$d3,XC.haar$s3))
names(inD) <- c("DD1","DD2","DD3","DS3")
names(inD) <- c("DD1","DD2","DD3","DS3")
dataInput　<- data.frame(dataInput,inD)
View(dataInput)
View(InData)
OBSInput <- InData[(InData$Month < 4 | InData$Month > 9),]
View(OBSInput)
plot(dataInput$DS3,OBSInput$DS3)
plot(dataInput$DD1,OBSInput$DD1)
plot(dataInput$DD1,OBSInput$DD1)
